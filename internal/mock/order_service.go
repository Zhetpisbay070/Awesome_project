// Code generated by mockery v2.51.0. DO NOT EDIT.

package mock

import (
	entity "awesomeProject1/internal/entity"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// OrderService is an autogenerated mock type for the OrderService type
type OrderService struct {
	mock.Mock
}

type OrderService_Expecter struct {
	mock *mock.Mock
}

func (_m *OrderService) EXPECT() *OrderService_Expecter {
	return &OrderService_Expecter{mock: &_m.Mock}
}

// CreateOrder provides a mock function with given fields: ctx, req
func (_m *OrderService) CreateOrder(ctx context.Context, req *entity.CreateOrderRequest) (*entity.Order, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrder")
	}

	var r0 *entity.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.CreateOrderRequest) (*entity.Order, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entity.CreateOrderRequest) *entity.Order); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entity.CreateOrderRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderService_CreateOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrder'
type OrderService_CreateOrder_Call struct {
	*mock.Call
}

// CreateOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - req *entity.CreateOrderRequest
func (_e *OrderService_Expecter) CreateOrder(ctx interface{}, req interface{}) *OrderService_CreateOrder_Call {
	return &OrderService_CreateOrder_Call{Call: _e.mock.On("CreateOrder", ctx, req)}
}

func (_c *OrderService_CreateOrder_Call) Run(run func(ctx context.Context, req *entity.CreateOrderRequest)) *OrderService_CreateOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.CreateOrderRequest))
	})
	return _c
}

func (_c *OrderService_CreateOrder_Call) Return(_a0 *entity.Order, _a1 error) *OrderService_CreateOrder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderService_CreateOrder_Call) RunAndReturn(run func(context.Context, *entity.CreateOrderRequest) (*entity.Order, error)) *OrderService_CreateOrder_Call {
	_c.Call.Return(run)
	return _c
}

// EditOrder provides a mock function with given fields: ctx, req
func (_m *OrderService) EditOrder(ctx context.Context, req *entity.EditOrderRequest) (*entity.Order, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for EditOrder")
	}

	var r0 *entity.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.EditOrderRequest) (*entity.Order, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entity.EditOrderRequest) *entity.Order); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entity.EditOrderRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderService_EditOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EditOrder'
type OrderService_EditOrder_Call struct {
	*mock.Call
}

// EditOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - req *entity.EditOrderRequest
func (_e *OrderService_Expecter) EditOrder(ctx interface{}, req interface{}) *OrderService_EditOrder_Call {
	return &OrderService_EditOrder_Call{Call: _e.mock.On("EditOrder", ctx, req)}
}

func (_c *OrderService_EditOrder_Call) Run(run func(ctx context.Context, req *entity.EditOrderRequest)) *OrderService_EditOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.EditOrderRequest))
	})
	return _c
}

func (_c *OrderService_EditOrder_Call) Return(_a0 *entity.Order, _a1 error) *OrderService_EditOrder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderService_EditOrder_Call) RunAndReturn(run func(context.Context, *entity.EditOrderRequest) (*entity.Order, error)) *OrderService_EditOrder_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrders provides a mock function with given fields: ctx, req
func (_m *OrderService) GetOrders(ctx context.Context, req *entity.GetOrders) ([]entity.Order, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetOrders")
	}

	var r0 []entity.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.GetOrders) ([]entity.Order, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entity.GetOrders) []entity.Order); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entity.GetOrders) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderService_GetOrders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrders'
type OrderService_GetOrders_Call struct {
	*mock.Call
}

// GetOrders is a helper method to define mock.On call
//   - ctx context.Context
//   - req *entity.GetOrders
func (_e *OrderService_Expecter) GetOrders(ctx interface{}, req interface{}) *OrderService_GetOrders_Call {
	return &OrderService_GetOrders_Call{Call: _e.mock.On("GetOrders", ctx, req)}
}

func (_c *OrderService_GetOrders_Call) Run(run func(ctx context.Context, req *entity.GetOrders)) *OrderService_GetOrders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.GetOrders))
	})
	return _c
}

func (_c *OrderService_GetOrders_Call) Return(_a0 []entity.Order, _a1 error) *OrderService_GetOrders_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderService_GetOrders_Call) RunAndReturn(run func(context.Context, *entity.GetOrders) ([]entity.Order, error)) *OrderService_GetOrders_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrderStatus provides a mock function with given fields: ctx, orderStatus, orderID
func (_m *OrderService) UpdateOrderStatus(ctx context.Context, orderStatus entity.OrderStatus, orderID string) error {
	ret := _m.Called(ctx, orderStatus, orderID)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrderStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.OrderStatus, string) error); ok {
		r0 = rf(ctx, orderStatus, orderID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OrderService_UpdateOrderStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrderStatus'
type OrderService_UpdateOrderStatus_Call struct {
	*mock.Call
}

// UpdateOrderStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - orderStatus entity.OrderStatus
//   - orderID string
func (_e *OrderService_Expecter) UpdateOrderStatus(ctx interface{}, orderStatus interface{}, orderID interface{}) *OrderService_UpdateOrderStatus_Call {
	return &OrderService_UpdateOrderStatus_Call{Call: _e.mock.On("UpdateOrderStatus", ctx, orderStatus, orderID)}
}

func (_c *OrderService_UpdateOrderStatus_Call) Run(run func(ctx context.Context, orderStatus entity.OrderStatus, orderID string)) *OrderService_UpdateOrderStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.OrderStatus), args[2].(string))
	})
	return _c
}

func (_c *OrderService_UpdateOrderStatus_Call) Return(_a0 error) *OrderService_UpdateOrderStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrderService_UpdateOrderStatus_Call) RunAndReturn(run func(context.Context, entity.OrderStatus, string) error) *OrderService_UpdateOrderStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewOrderService creates a new instance of OrderService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderService(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderService {
	mock := &OrderService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
